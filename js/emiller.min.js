(function(factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('jquery'));
  } else {
    factory(jQuery);
  }
})(function($) {
  var pluses = /\+/g;
  function encode(s) {
    return config.raw ? s : encodeURIComponent(s);
  }
  function decode(s) {
    return config.raw ? s : decodeURIComponent(s);
  }
  function stringifyCookieValue(value) {
    return encode(config.json ? JSON.stringify(value) : String(value));
  }
  function parseCookieValue(s) {
    if (s.indexOf('"') === 0) {
      s = s
        .slice(1, -1)
        .replace(/\\"/g, '"')
        .replace(/\\\\/g, '\\');
    }
    try {
      s = decodeURIComponent(s.replace(pluses, ' '));
      return config.json ? JSON.parse(s) : s;
    } catch (e) {}
  }
  function read(s, converter) {
    var value = config.raw ? s : parseCookieValue(s);
    return $.isFunction(converter) ? converter(value) : value;
  }
  var config = ($.cookie = function(key, value, options) {
    if (arguments.length > 1 && !$.isFunction(value)) {
      options = $.extend({}, config.defaults, options);
      if (typeof options.expires === 'number') {
        var days = options.expires,
          t = (options.expires = new Date());
        t.setMilliseconds(t.getMilliseconds() + days * 864e5);
      }
      return (document.cookie = [
        encode(key),
        '=',
        stringifyCookieValue(value),
        options.expires ? '; expires=' + options.expires.toUTCString() : '',
        options.path ? '; path=' + options.path : '',
        options.domain ? '; domain=' + options.domain : '',
        options.secure ? '; secure' : '',
      ].join(''));
    }
    var result = key ? undefined : {},
      cookies = document.cookie ? document.cookie.split('; ') : [],
      i = 0,
      l = cookies.length;
    for (; i < l; i++) {
      var parts = cookies[i].split('='),
        name = decode(parts.shift()),
        cookie = parts.join('=');
      if (key === name) {
        result = read(cookie, value);
        break;
      }
      if (!key && (cookie = read(cookie)) !== undefined) {
        result[name] = cookie;
      }
    }
    return result;
  });
  config.defaults = {};
  $.removeCookie = function(key, options) {
    $.cookie(key, '', $.extend({}, options, { expires: -1 }));
    return !$.cookie(key);
  };
});
(function($) {
  $(function() {
    var signupChannel = localStorage.getItem('emiller.signup-channel');
    if (signupChannel && $('#mce-CHANNEL').length) {
      $('#mce-CHANNEL').val(signupChannel);
    }
    var hasCompletionCookie = $.cookie('emiller.popup_promotion.completed');
    if (hasCompletionCookie) return;
    var $component = $('[data-subscriber-overlay]');
    if ($component.length <= 0) {
      return;
    }
    var $close = $component.find('[data-subscriber-overlay-close]');
    var $remindMe = $component.find('[data-subscriber-overlay-remind-me]');
    var $complete = $component.find('[data-subscriber-overlay-complete]');
    var hasPromotionCookie = $.cookie('emiller.popup_promotion.remind');
    function initClickHandlers() {
      $close.on('click', function() {
        closeOverlay();
        if (typeof dataLayer !== 'undefined') {
          dataLayer.push({ event: 'overlay_closed' });
        }
      });
      $remindMe.on('click', function() {
        closeOverlay();
        if (typeof dataLayer !== 'undefined') {
          dataLayer.push({ event: 'overlay_remind_me' });
        }
      });
      $complete.on('click', function() {
        if (typeof dataLayer !== 'undefined') {
          dataLayer.push({ event: 'overlay_completed' });
        }
        $.cookie('emiller.popup_promotion.completed', 1, { expires: 10 * 365 });
        localStorage.setItem('emiller.signup-channel', 'Subscriber Overlay');
      });
    }
    function initEventHandlers() {
      $component.bind('keyup', function(event) {
        if (event.keyCode === 27) {
          closeOverlay();
        }
      });
      $('[data-tabloop-subscribe]').tabloop();
    }
    function closeOverlay() {
      $.cookie('emiller.popup_promotion.remind', 1, { expires: 30 });
      $component.removeClass('visible');
      $('[data-tabloop-subscribe]').unbind();
      $('[data-tabloop-subscribe]').attr('tabindex', '-1');
      $('#skip-link').focus();
    }
    function showPromotion(exists) {
      if (exists) return;
      setTimeout(function() {
        $component.addClass('visible');
        $close.focus();
        $('[data-tabloop-subscribe]').attr('tabindex', '1');
        if (typeof dataLayer !== 'undefined') {
          dataLayer.push({ event: 'overlay_seen' });
        }
      }, 5000);
    }
    showPromotion(hasPromotionCookie);
    initClickHandlers();
    initEventHandlers();
  });
  $.fn.tabloop = function() {
    var p = { collection: this };
    $(this).keydown(p, function(e) {
      if ($(e.currentTarget)[0] == e.data.collection.last()[0]) {
        e.data.collection.first().focus();
        e.preventDefault();
      }
    });
  };
})(jQuery, this);
